/*
 * GccApplication4.c
 *
 * Created: 14-02-2020 22:44:30
 *  Author: yadav
 */ 


#include <avr/io.h>
typedef int bool;
#define TRUE  1
#define FALSE 0
#define  F_CPU 14745600
#define stepc 1
#define stepac 0
#define clk 1
#define anclk 0
#include <avr/interrupt.h>
#include <util/delay.h>
int sensor_values[3];
////////////////////////////////////////////all about motor///////////////////////////////////////////////////////////////////////////
int left=0;
int right=0;
int wls_left;
int wls_middle;
int wls_right;
int count=0;

//LCD definition......................................///////////////////////////////////////
#define LCD_Data_Dir DDRK		/* Define LCD data port direction */
#define LCD_Command_Dir DDRC		/* Define LCD command port direction register */
#define LCD_Data_Port PORTK		/* Define LCD data port */
#define LCD_Command_Port PORTC		/* Define LCD data port */
#define RS PC0				/* Define Register Select (data/command reg.)pin */
#define RW PC1				/* Define Read/Write signal pin */
#define EN PC2				/* Define Enable signal pin */
///////////////////////////////////////////////////////////////////////////////////////////////







//graph definition......................................///////////////////////////////////////
#define INFINITY 9999
#define MAX 16
void dijkstra(int G[MAX][MAX],int n,int startnode,int lastnode);
int path[50][50];
int step=0;
///////////////////////////////////////////////////////////////////////////////////////////////



//movement definitions..................................///////////////////////////////////////
#define clk 1
#define anclk 0
int direction=0;
int f=0;
///////////////////////////////////////////////////////////////////////////////////////////////



//functions definitions..................................//////////////////////////////////////
bool to_pick = TRUE;
void picking(int material);
void placing(int house,int i);
void travel(int p1, int p2);
void wall_follower(void);
bool is_white_Node(void);
void white_right_turn_wls(void);
void white_left_turn_wls(void);
void LCD_Command(unsigned char cmnd);
void LCD_Char (unsigned char char_data);
void LCD_Init (void);
void LCD_String (char *str)	;
void LCD_String_xy (char row, char pos, char *str);
void LCD_Clear();
void wls_print();
void buzzer();
void turn_180();
void servo1(int initial,int final);
void servo2(int initial,int final);
void servo3(int initial,int final);
void servo4(int initial,int final);
void velocity (unsigned char left_motor, unsigned char right_motor);
void read_wls(void);
void stopm();
void forward();
void backward();
void turn_right();
void turn_left();
void soft_right();
void soft_left();
void pick_bot();
void place_lr();
void place_hr();
void place_in(int d, int pi, int pl);
void pick_from(int d, int a, int p);
void papom(int dir, int pick, int place);
void stepper(int rot, int deg);
void wall_follower();
void ir();

///////////////////////////////////////////////////////////////////////////////////////////////



//global variables assignment..................................////////////////////////////////

int wls_left, wls_right, wls_middle;
int ir_left,ir_right;
int count1=0;
///////////////////////////////////////////////////////////////////////////////////////////////


void all_init()
{
	
	//stepper connections
	DDRA=0x3F;
	PORTA =0x20;
	
	//direction 0   anticlockwise
	//direction 1   clockwise
	
	
	
	//step A0			 1
	//direction A1		 2
	//MS1 A2			 4
	//MS2 A3			 8
	//MS3 A4			 10
	//Enable A5			 20
	
	//left motor pins 0 and 1
	//right motor pins 2 and 3
	DDRD=0x0f;
	PORTD =0x00;
	DDRL=0xFF;
	PORTL=0xFF;
	DDRH=0xFF;
	PORTH=0xFF;
	//timer setup.........................
	//left and right motors pwm speed registers()
	TCCR5A = 0xA9;
	TCCR5B = 0x0B;
	TCNT5H = 0xFF;
	TCNT5L = 0x00;
	OCR5AH = 0x00;//PL3
	OCR5AL = 0xFF;
	OCR5BH = 0x00;//PL4
	OCR5BL = 0xFF;
	
	
	//servo connections
	DDRB=0xFF;
	PORTB=0xff;
	DDRH=0xFF;
	PORTH=0xff;
	//DDRH=0xFF;
	//PORTH=0xff;
	
	//Servos pwm registers
	// 	TCCR1A = 0xA9;
	// 	TCCR1B = 0x0B;
	// 	TCNT1H = 0xFF;
	// 	TCNT1L = 0x00;
	// 	OCR1AH = 0x00;    //PB5  servo 4
	// 	OCR1AL = 0xFF;
	// 	OCR1BH = 0x00;   //PB6   servo 3
	// 	OCR1BL = 0xFF;
	// 	OCR1CH = 0x00;   //PB7   servo 2
	// 	OCR1CL = 0xFF;

	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
	
	TCCR4A|=(1<<COM4A1)|(1<<COM4B1)|(1<<WGM41);        //NON Inverted PWM//ph3>>oc4a/ph4>>oc4b
	TCCR4B|=(1<<WGM43)|(1<<WGM42)|(1<<CS41)|(1<<CS40); //PRESCALER=64 MODE 14(FAST PWM)

	ICR4=4999;  //fPWM=50Hz (Period = 20ms Standard).

	
	
	
	
	//servo initial positions.............................................
	OCR4A=350;    //SERVO1
	//Wait();
	OCR4B=450;    //SERVO2
	// Wait();
	OCR1B=316;		//SERVO3
	OCR1A=300;		//SERVO4
	LCD_Init();
	
	
}

//LCD functions ..................................///////////////////////////////////////////////////////////////////////////////////


void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port= cmnd;
	LCD_Command_Port &= ~(1<<RS);	/* RS=0 command reg. */
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
	LCD_Command_Port |= (1<<EN);	/* Enable pulse */
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
	_delay_ms(3);
}

void LCD_Char (unsigned char char_data)	/* LCD data write function */
{
	LCD_Data_Port= char_data;
	LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 write operation */
	LCD_Command_Port |= (1<<EN);	/* Enable Pulse */
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
	_delay_ms(1);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Command_Dir = 0xFF;		/* Make LCD command port direction as o/p */
	LCD_Data_Dir = 0xFF;		/* Make LCD data port direction as o/p */
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command (0x38);		/* Initialization of 16X2 LCD in 8bit mode */
	LCD_Command (0x0C);		/* Display ON Cursor OFF */
	LCD_Command (0x06);		/* Auto Increment cursor */
	LCD_Command (0x01);		/* Clear display */
	LCD_Command (0x80);		/* Cursor at home position */
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
	}
}

void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}

void LCD_Clear()
{
	LCD_Command (0x01);		/* clear display */
	LCD_Command (0x80);		/* cursor at home position */
}

void wls_print()
{
	unsigned char c[5];
	read_wls();
	itoa(wls_left, c, 10);
	LCD_String(c);
	
	itoa(wls_middle, c, 10);
	LCD_String_xy(0,5,c);
	
	itoa(wls_right, c, 10);
	LCD_String_xy(1,0,c);
	_delay_ms(10);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////




/*
*Team Id: 1634
*Author List: Praveen Dwivedi,Praveen kumar Yadav,Darshan ,Gosu Arun kumar
*Filename: CB_Task_1_Sandbox.cpp
*Theme: Construct-O-Bot – eYRC Specific
*Functions: next_move(char), all_sensor_black(), all_sensor_white(), get_back_to_line(), isNode(), follow_white_line(), forward_wls(char), left_turn_wls(), right_turn_wls(), Task_1_1()
*Global Variables: NONE
*/

//  #verified but function description is remaining
void shortest_path(int u,int l)
{
		int i,j,n;
		n=16;
		int G[16][16]={{0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,1,0,1,0,0,0,0,0,0,0,0,4,0},
		{0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,1,0,1,0,0,0,0,5,0,0,0},
		{0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0},
		{0,0,0,0,0,0,5,0,0,0,0,1,0,1,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0},
		{0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}};
		

		
		dijkstra(G,n,u,l);
		
		 for(int i=0;i<count1;i++)
		 {   
			 //printf("%d>>%d",path[step][i],path[step][i+1]);
			 travel(path[step][i],path[step][i+1]);
		 }
}

/*
*Team Id: 1634
*Author List: Praveen Dwivedi,Praveen kumar Yadav,Darshan ,Gosu Arun kumar
*Filename: CB_Task_1_Sandbox.cpp
*Theme: Construct-O-Bot – eYRC Specific
*Functions: next_move(char), all_sensor_black(), all_sensor_white(), get_back_to_line(), isNode(), follow_white_line(), forward_wls(char), left_turn_wls(), right_turn_wls(), Task_1_1()
*Global Variables: NONE
*/

//  #verified but function description is remaining
void dijkstra(int G[MAX][MAX],int n,int startnode,int lastnode)
{
	int cost[MAX][MAX],distance[MAX],pred[MAX];
	int visited[MAX],count,mindistance,nextnode,i,j;
	//pred[] stores the predecessor of each node
	//count gives the number of nodes seen so far
	//create the cost matrix
	for(i=0;i<n;i++)
	for(j=0;j<n;j++)
	if(G[i][j]==0)
	cost[i][j]=INFINITY;
	else
	cost[i][j]=G[i][j];
	
	//initialize pred[],distance[] and visited[]
	for(i=0;i<n;i++)
	{
		distance[i]=cost[startnode][i];
		pred[i]=startnode;
		visited[i]=0;
	}
	
	distance[startnode]=0;
	visited[startnode]=1;
	count=1;
	
	while(count<n-1)
	{
		mindistance=INFINITY;
		
		//nextnode gives the node at minimum distance
		for(i=0;i<n;i++)
		if(distance[i]<mindistance&&!visited[i])
		{
			mindistance=distance[i];
			nextnode=i;
		}
		
		//check if a better path exists through nextnode
		visited[nextnode]=1;
		for(i=0;i<n;i++)
		if(!visited[i])
		if(mindistance+cost[nextnode][i]<distance[i])
		{
			distance[i]=mindistance+cost[nextnode][i];
			pred[i]=nextnode;
		}
		count++;
	}
	
	
	//print the path and distance of each node
	i=lastnode;
	if(i!=startnode)
	{
		printf("\nDistance of node%d=%d",i,distance[i]);
		//printf("\nPath=%d",i);
		
		j=i;
		int count1=0;
		// 			int c[20];
		// 			int l=0;
		do
		{
			j=pred[j];
			//printf("<-%d",j);
			count1++;
		}while(j!=startnode);
		j=i;
		path[step][count1]=lastnode;
		//printf("\nnodes = %d\n",count1);
		for(int i=0;i<count1;i++)
		{
			path[step][count1-i-1]=pred[j];
			//printf("%d ",pred[j]);
			j=pred[j];
		}
		for(int i=0;i<count1+1;i++)
		{
			
			printf("\n%d ",path[step][i]);
			
		}
	}	
}


/*
*
* Function Name: all_sensor_black
* Input: void
* Output: void
* Logic: Uses white line sensors to detect white line
* Example Call: all_sensor_black(); //Moves right & left alternatively repeatedly until white line is detected
*
*/
void travel(int p1, int p2)
{
	
	if (direction == clk)
	{
		if (( (p1==4 && p2==3)||(p1==6 && p2==5)||(p1==12 && p2==11)||(p1==14 && p2==13)  )&& (f==1))
		{
			right_turn_wls();

			//printf("right a and flag = %d\t", f);
			f = 0;
			direction=clk;
		}
		else if (( (p1==4 && p2==5)||(p1==6 && p2==7)||(p1==12 && p2==13)||(p1==14 && p2==15)  )&&(f==1))
		{
			left_turn_wls();
			//printf("left \n");
			f = 0;
			direction=anclk;
		}
		else if (p1 == 10 || p1 == 8 || p1 == 2 || p1 == 0)
		{

			right_turn_wls();
			//printf("right b\n");
		}
		else if(p2-p1==1)
		{
			//printf("turn_180");
			direction=anclk;
			turn_180();
		}
		else if (abs(p1 - p2) > 1)
		{
			right_turn_wls();
			//printf("right c\n");
			f=1;
			
		}
		
	}
	else if (direction == anclk)
	{
		//printf("\np1:%d\n", p1);
		//printf("f:%d\n", f);
		if (( (p1==4 && p2==5)||(p1==6 && p2==7)||(p1==12 && p2==13)||(p1==14 && p2==15)  )&&(f==1))
		{
			left_turn_wls();
			//printf("left \n");
			f = 0;
			direction=anclk;
		}
		else if (( (p1==4 && p2==3)||(p1==6 && p2==5)||(p1==12 && p2==11)||(p1==14 && p2==13)  )&&(f==1))
		{
			right_turn_wls();

			//printf("right a and flag = %d\t", f);
			f = 0;
			direction=clk;
		}
		else if (p1 == 10 || p1 == 8 || p1 == 2 || p1 == 0)
		{
			left_turn_wls();
			//printf("left \n");
		}
		else if(p1-p2==1)
		{
			//printf("turn_180\n");
			direction=clk;
			turn_180();
		}
		else if (abs(p1 - p2) > 1 && p2!=0)
		{
			left_turn_wls();
			//printf("left \n");
			f = 1;
		}
		
	}
	if ((p1 == 14 && p2 == 4) || (p1 == 4 && p2 == 14))
	{
		//printf("wall follow \n");
		wall_follower();
	}
	else if ( p1 == 9 && (p2 == 8 || p2 == 10))
	{
		//printf("whiteline follow\n");
		follow_white_line(1,150);
	}
	else if (p2 == 9)
	{
		//printf("forward_wls\n");
		forward_wls(1, 150);
	}
	else
	{
		//printf(" forward\n");
		forward_wls(1, 150);
	}
	//printf("%d \n", direction);

	//	_delay_ms(20);


}


void follow_white_line(int node,int speed)
{
	int i=0,node_covered=0;
	read_wls();

	if(wls_middle>150 && wls_left>150)
	{
		velocity(130,130);
		
		while(wls_middle>170)
		{
			soft_left();
			read_wls();
		}
	}
	else if(wls_middle>150 && wls_right>150)
	{
		velocity(110,110);
		soft_right();
		while(wls_middle>170)
		{
			soft_right();
			read_wls();
		}
	}
	
	while (wls_middle < 190 && wls_left < 190 && wls_right < 190)
	{
		velocity(150,132);
		forward();
		read_wls();
		
	}
	velocity(150,135);
	forward();

	while (1)
	{
		read_wls();
		
		if (wls_middle < 170 && wls_left < 170 && wls_right < 170)
		{
			velocity(150,133);
			backward();
			_delay_ms(30);
			stopm();
			_delay_ms(20);
			wls_print();
			_delay_ms(1000);
			LCD_Clear();
			
			if(wls_middle>50 && wls_right <50 && wls_left<50)
			{
				velocity(150,150);
				forward();
				forward_wls(1,150);
			}
			
			break;
		}
		else if (wls_left < 150 && wls_middle < 150 && wls_right > 150)
		{
			velocity(120,120);
			turn_left();
		}
		else if (wls_middle < 150 && wls_left > 150 && wls_right < 150)
		{
			velocity(120,120);
			turn_right();
		}
		
		
		else if (wls_left > 170 && wls_middle > 170 && wls_right < 170)
		{
			
			
			velocity(120,120);
			soft_right();
			_delay_ms(50);
			
		}
		else if (wls_left < 170 && wls_middle > 170 && wls_right > 170)
		{
			
			
			velocity(120,120);
			soft_left();
			_delay_ms(50);
			
		}
		
		
		else
		{
			velocity(150,132);
			forward();
		}
		
		

	}

}



void forward_wls(int node,int speed)
{
	int i=0,node_covered=0;
	read_wls();
	while (wls_middle > 100 && wls_left > 100 && wls_right > 100)
	{
		velocity(150,132);
		forward();
		read_wls();
		
	}
	velocity(150,135);
	forward();
	while (1)
	{
		read_wls();
		
		

		//NODE DETECTED
		if (wls_middle > 100 && wls_left > 100 && wls_right > 100)
		{
			velocity(150,132);
			backward();
			_delay_ms(30);
			stopm();
			_delay_ms(20);
			node_covered++;
			i=0;
			
			
			if (node_covered == node)
			{
				break;
			}
			
			
			while (wls_middle > 100 && wls_left > 100 && wls_right > 100)
			{
				velocity(150, 132);
				forward();
				_delay_ms(30);
				read_wls();
			}
			
			stopm();
			_delay_ms(250);
		}
		else if (wls_middle > 100 && (wls_left > 100 || wls_right > 100))
		{
			velocity(120,120);
			if(i==3)
			{
				backward();
				_delay_ms(15);
			}
			
			if(wls_left < 100)
			turn_right();
			else if (wls_right < 100)
			turn_left();
			_delay_ms(5);
			stopm();
			i++;
			
			
		}
		
		
		else if (wls_middle < 100 && (wls_left > 100 || wls_right> 100))
		{
			
			
			velocity(120,120);
			if(wls_left > 100)
			{
				soft_left();
				_delay_ms(50);
			}
			else if(wls_right > 100)
			{
				soft_right();
				_delay_ms(50);
			}
		}
		//else if(wls_middle > 150 && wls_left < 100 && wls_right > 150)
		else
		{
			velocity(150,132);
			forward();
		}
		
		

	}
}

void left_turn_wls(void)
{
	
	
	velocity(120,120);
	forward();
	_delay_ms(200);
	soft_left();
	_delay_ms(250);
	read_wls();
	while (wls_middle < 100)
	{
		velocity(110,110);
		soft_left();

		read_wls();

	}
	stopm();
}
void right_turn_wls(void)
{
	velocity(120,120);
	forward();
	_delay_ms(200);
	soft_right();
	_delay_ms(250);
	read_wls();
	while (wls_middle < 100)
	{
		velocity(115,115);
		soft_right();

		read_wls();

	}
}


void buzzer()
{
	DDRD=0xF0;
	for(int i=0;i<2500;i++)       //5 seconds 25500
	{
		PORTD=0b10000000;
		_delay_us(100);
		PORTD=0b00000000;
		_delay_us(100);
	}
	DDRD=0x00;
	
}
void turn_180()
{
	velocity(120,120);
	turn_right();
	_delay_ms(1500);
	stopm();
	read_wls();
	while(wls_middle<100)
	{
		velocity(100,100);
		turn_right();
		read_wls();
	}
	stopm();
}

void servo1(int initial,int final)
{
	if(initial<final)
	{
		for(int i=initial;i<=final;i++)
		{
			OCR4A = i;
			_delay_ms(10);
		}
	}
	else if(final<initial)
	{
		for(int i=initial;i>=final;i--)
		{
			OCR4A = i;
			_delay_ms(10);
		}
	}
	// {
	// 		for(int i=97;i<=260;i++)
	// 	{
	// 		OCR4A = i;
	// 		_delay_ms(10);
	// 	}
	// 		for(int i=260;i>=97;i--)
	//
	// 		{
	// 			OCR4A = i;
	// 			_delay_ms(10);
	// 		}
	
}
void servo2(int initial,int final)
{
	if(initial<final)
	{
		for(int i=initial;i<=final;i++)
		{
			OCR4B = i;
			_delay_ms(10);
		}
	}
	else if(final<initial)
	{
		for(int i=initial;i>=final;i--)
		{
			OCR4B = i;
			_delay_ms(10);
		}
	}
	// {
	// 	for(int i=50;i<=250;i++)
	// 	{
	// 		OCR4B = i;
	// 		_delay_ms(20);
	// 	}
	// 	for(int i=250;i>=50;i--)
	// 	{
	// 		OCR4B = i;
	// 		_delay_ms(20);
	// 	}
}
void servo3(int initial,int final)
{
	if(initial<final)
	{
		for(int i=initial;i<=final;i++)
		{
			OCR1B = i;
			_delay_ms(10);
		}
	}
	else if(final<initial)
	{
		for(int i=initial;i>=final;i--)
		{
			OCR1B = i;
			_delay_ms(10);
		}
	}
	// {
	// 	for(int i=40;i<=150;i++)
	// 	{
	// 		OCR1B = i;
	// 		_delay_ms(10);
	// 	}
	// 		for(int i=150;i>=40;i--)
	// 		{
	// 			OCR1B = i;
	// 			_delay_ms(10);
	// 		}
}
void servo4(int initial,int final)
{
	if(initial<final)
	{
		for(int i=initial;i<=final;i++)
		{
			OCR1A = i;
			_delay_ms(10);
		}
	}
	else if(final<initial)
	{
		for(int i=initial;i>=final;i--)
		{
			OCR1A = i;
			_delay_ms(10);
		}
	}
	// 	for(int i=160;i<=250;i++)
	// 	{
	// 		OCR1A = i;
	// 		_delay_ms(20);
	// 	}
	// 	for(int i=250;i>=160;i--)
	// 	{
	// 		OCR1A = i;
	// 		_delay_ms(20);
	// 	}
}


void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
	OCR5BL = (unsigned char)right_motor;
}

void read_wls(void)
{
	ADCSRA=0x87;
	ADCSRB=0x00;
	ADMUX=0xA0;
	ADMUX = 0xA0;
	ADCSRA |= (1 << ADEN);  // Enable ADC
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	while(ADCSRA & (1<<ADSC)){}
	wls_left=ADCH;
	
	//Serial.print("A0: ");
	//Serial.println(ADCH);
	ADMUX = 0xA1;
	ADCSRA |= (1 << ADEN);  // Enable ADC
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	while(ADCSRA & (1<<ADSC)){}
	wls_middle=ADCH;
	
	//Serial.print("A1: ");
	//	Serial.println(ADCH);
	ADMUX = 0xA2;
	ADCSRA |= (1 << ADEN);  // Enable ADC
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	while(ADCSRA & (1<<ADSC)){}
	wls_right=ADCH;
	
	//Serial.print("A2: ");
	//Serial.println(ADCH);
	//      _delay_ms(100);
}

void stopm()
{
	PORTD =0b00000000;
}
void forward()
{
	PORTD =0b00000101;
}
void backward()
{
	PORTD =0b00001010;
}
void turn_right()
{
	PORTD =0b00001001;
}
void turn_left()
{
	PORTD =0b00000110;
}
void soft_right()
{
	PORTD =0b00000001;
}
void soft_left()
{
	PORTD =0b00000100;
}

void pick_bot()
{
	//read_wls();
	//while(wls_middle<200)
	//{
	//if(wls_left>200 && wls_middle<200)
	//turn_left();
	//else if(wls_right>200 && wls_middle<200)
	//turn_right();
	//else if(wls_left>200)
	//turn_left();
	//else if(wls_right>200)
	//turn_right();
	//else
	//break;
	//_delay_ms(30);
	//read_wls();
	//}
	//stopm();
	servo2(450,355);
	servo1(350,110);
	servo2(355,260);
	servo4(300,150);
	
	servo1(110,350);
	servo2(270,355);
	servo2(355,450);
}
void place_lr()
{
	servo2(450,326);
	servo1(350,206);
	servo4(150,300);
	servo1(206,350);
	servo2(326,355);
	servo2(355,450);
	
}
void place_hr()
{
	servo2(450,300);
	servo1(350,290);
	servo4(150,300);
	servo1(290,350);
	servo2(300,450);
	
	
}
void place_in(int d, int pi, int pl)
{
	int a;
	if(d==clk)
	{
		if(pi==5)
		a=1;
		else if(pi==6)
		a=2;
	}
	else if(d==anclk)
	{
		if(pi==5)
		a=2;
		else if(pi==6)
		a=1;
	}
	
	
	if(a==1)
	{
		if(pl==1)
		{
			stepper(stepc,1800);
			servo3(316,370);
			servo1(350, 240);
			servo4(150, 300);
			servo1(240,350);
			servo3(370,316);
			stepper(stepac,1000);
			
		}
		else if(pl==2)
		{
			stepper(stepc,1000);
			servo3(316,370);
			servo1(350, 240);
			servo4(150, 300);
			servo1(240,350);
			servo3(370,316);
			stepper(stepac,200);
			
		}
		else if(pl==3)
		{
			stepper(stepc,200);
			servo3(316,370);
			servo1(350, 240);
			servo4(150, 300);
			servo1(240,350);
			servo3(370,316);
			stepper(stepc,600);
		}
		else if(pl==4)
		{
			stepper(stepac,200);
			servo3(316,370);
			servo1(350, 240);
			servo4(150, 300);
			servo1(240,350);
			servo3(370,316);
			stepper(stepc,1000);
		}
		
	}
	else if(a==2)
	{
		if(pl==1)
		{
			stepper(stepc,200);
			servo3(316,370);
			servo1(350, 240);
			servo4(150, 300);
			servo1(240,350);
			servo3(370,316);
			stepper(stepac,1000);
			
		}
		else if(pl==2)
		{
			stepper(stepac,600);
			servo3(316,370);
			servo1(350, 240);
			servo4(150, 300);
			servo1(240,350);
			servo3(370,316);
			stepper(stepac,200);
			
		}
		else if(pl==3)
		{
			stepper(stepac,1400);
			servo3(316,370);
			servo1(350, 240);
			servo4(150, 300);
			servo1(240,350);
			servo3(370,316);
			stepper(stepc,600);
		}
		else if(pl==4)
		{
			stepper(stepac,1800);
			servo3(316,370);
			servo1(350, 240);
			servo4(150, 300);
			servo1(240,350);
			servo3(370,316);
			stepper(stepc,1000);
		}
	}
}
void pick_from(int d, int a, int p)
{
	switch(a)
	{
		case 1:
		{
			stepper(stepc, 1000);
			
			servo3(316,370);
			servo1(350, 230);
			servo4(300, 150);
			servo1(230,350);
			servo3(370,316);
			
			if(d==clk)
			{
				if((p==5) || (p==6))
				{
					stepper(stepac, 1800);
				}
				
				else if(p==7)
				{
					stepper(stepac,200);
				}
				else if((p==8) || (p==9))
				{
					stepper(stepac,1000);
				}
			}
			else if(d==anclk)
			{
				if((p==5) || (p==6))
				{
					stepper(stepac, 200);
				}
				
				else if(p==7)
				{
					stepper(stepac,1800);
				}
				else if((p==8) || (p==9))
				{
					stepper(stepac,1000);
				}
				
			}
			break;
		}
		case 2:
		{
			stepper(stepc, 200);
			servo3(316,370);
			servo1(350, 230);
			servo4(300, 150);
			servo1(230,350);
			servo3(370,316);
			if(d==clk)
			{
				if(p==5 || p==6)
				{
					stepper(stepac, 1000);
				}
				
				else if(p==7)
				{
					stepper(stepc,600);
				}
				else if(p==8 || p==9)
				{
					stepper(stepac,200);
				}
			}
			else if(d==anclk)
			{
				if(p==5 || p==6)
				{
					stepper(stepc, 600);
				}
				else if(p==7)
				{
					stepper(stepac,1000);
				}
				else if(p==8 || p==9)
				{
					stepper(stepac,200);
				}
				
			}
			
			break;
		}
		case 3:
		{
			stepper(stepac,200 );
			servo3(316,370);
			servo1(350, 230);
			servo4(300, 150);
			servo1(230,350);
			servo3(370,316);
			if(d==clk)
			{
				if(p==5 || p==6)
				{
					stepper(stepac, 600);
				}
				
				else if(p==7)
				{
					stepper(stepc,1000);
				}
				else if(p==8 || p==9)
				{
					stepper(stepc,200);
				}
			}
			else if(d==anclk)
			{
				if(p==5 || p==6)
				{
					stepper(stepc, 1000);
				}
				else if(p==7)
				{
					stepper(stepac,600);
				}
				else if(p==8 || p==9)
				{
					stepper(stepc,200);
				}
				
			}
			
			break;
		}
		case 4:
		{
			stepper(stepac, 1000);
			servo3(316,370);
			servo1(350, 230);
			servo4(300, 150);
			servo1(230,350);
			servo3(370,316);
			if(d==clk)
			{
				if(p==5 || p==6)
				{
					stepper(stepc, 200);
				}
				
				else if(p==7)
				{
					stepper(stepc,1800);
				}
				else if(p==8 || p==9)
				{
					stepper(stepc,1000);
				}
			}
			else if(d==anclk)
			{
				if(p==5 || p==6)
				{
					stepper(stepc, 1800);
				}
				else if(p==7)
				{
					stepper(stepac,200);
				}
				else if(p==8 || p==9)
				{
					stepper(stepc,1000);
				}
				
			}
		}
		break;
	}
	
}


void papom(int dir, int pick, int place)
{
		int i;
		//direction ==1, clockise        direction ==0, anticlockwise
		//pick 1,2,3,4-on the bot, 5-outside, 6-inside
		//place1,2,3,4-on the bot, 5-outside low rise, 6- outside high rise , 7-inside, 8-front low rise, 9-front high rise
		if(dir==clk)
		{
			if(pick>0 )
			{
				switch(pick)
				{
					case 1:
					{
						pick_from(dir,pick,place);
						break;
					}
					case 2:
					{
						pick_from(dir,pick,place);
						break;
					}
					case 3:
					{
						pick_from(dir,pick,place);
						break;
					}
					case 4:
					{
						pick_from(dir,pick,place);
						break;
					}
					case 5:
					{
						stepper(stepac, 800);
						pick_bot();
						break;
						
					}
					case 6:
					{
						stepper(stepc, 780);
						pick_bot();
						break;
					}
				}
				
			}
			
			if(place>0)
			{
				switch(place)
				{
					case 1:
					{
						place_in(dir,pick, place);
						break;
					}
					case 2:
					{
						place_in(dir,pick, place);
						break;
					}
					case 3:
					{
						place_in(dir,pick, place);
						break;
					}
					case 4:
					{
						place_in(dir,pick, place);
						break;
					}
					case 5:
					{
						place_lr();
						if(dir==clk)
						stepper(stepc,800);
						else if(dir==anclk)
						stepper(stepac,800);
						
						break;
					}
					case 6:
					{
						place_hr();
						if(dir==clk)
						stepper(stepc,800);
						else if(dir==anclk)
						stepper(stepac,800);
						break;
					}
					case 7:
					{
						place_lr();
						if(dir==clk)
						stepper(stepac,800);
						else if(dir==anclk)
						stepper(stepc,800);
						break;
					}
					case 8:
					{
						place_lr();
						break;
					}
					case 9:
					{
						place_hr();
						break;
					}
				}
			}
			
		}
		if(dir==anclk)
		{
			if(pick>0 )
			{
				switch(pick)
				{
					case 1:
					{
						pick_from(dir,pick,place);
						break;
					}
					case 2:
					{
						pick_from(dir,pick,place);
						break;
					}
					case 3:
					{
						pick_from(dir,pick,place);
						break;
					}
					case 4:
					{
						pick_from(dir,pick,place);
						break;
					}
					case 5:
					{
						stepper(stepc, 800);
						pick_bot();
						break;
						
					}
					case 6:
					{
						stepper(stepac, 800);
						pick_bot();
						break;
					}
				}
				
			}
			
			if(place>0)
			{
				switch(place)
				{
					case 1:
					{
						place_in(dir,pick, place);
						break;
					}
					case 2:
					{
						place_in(dir,pick, place);
						break;
					}
					case 3:
					{
						place_in(dir,pick, place);
						break;
					}
					case 4:
					{
						place_in(dir,pick, place);
						break;
					}
					case 5:
					{
						place_lr();
						if(dir==clk)
						stepper(stepc,800);
						else if(dir==anclk)
						stepper(stepac,800);
						
						break;
					}
					case 6:
					{
						place_hr();
						if(dir==clk)
						stepper(stepc,800);
						else if(dir==anclk)
						stepper(stepac,800);
						break;
					}
					case 7:
					{
						place_lr();
						if(dir==clk)
						stepper(stepac,800);
						else if(dir==anclk)
						stepper(stepc,800);
						break;
					}
					case 8:
					{
						place_lr();
						break;
					}
					case 9:
					{
						place_hr();
						break;
					}
				}
			}
			
		}
				
	
}
	
void stepper(int rot, int deg)
{
	
	//rot = 1-clockwise   0-anticlockwise
	
	int i=0;
	PORTA=0x1C;
	
	if(rot==stepc)
	{
		PORTA=0x1E;
	}
	
	for(i=0;i<deg;i++)
	{
		
		PORTA |= (1<<0);
		_delay_us(500);
		PORTA  &= ~(1<<0);
		_delay_us(500);

	}
	PORTA=0x20;
}

void wall_follower()
{
	velocity(120,120);
	ir();
	if(ir_left<95)
	{
		soft_left();
	}
	else if(ir_left>100)
	{
		soft_right();
	}
	else
	{
		forward();
	}
	_delay_ms(100);
}

void ir()
{
	ADMUX = 0xA4;
	ADCSRA |= (1 << ADEN);  // Enable ADC
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	while(ADCSRA & (1<<ADSC)){}
	ir_right=ADCH;
	ADMUX = 0xA5;
	ADCSRA |= (1 << ADEN);  // Enable ADC
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
	while(ADCSRA & (1<<ADSC)){}
	ir_left=ADCH;
}

int main(void)
{
	all_init();
	velocity(150,150);
	//travel(10,9);
	//forward_wls(1,120);
	shortest_path(3,5);
	
	
	return 0;
}











